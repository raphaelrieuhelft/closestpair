;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(declare-sort uni 0)

(declare-sort ty 0)

(declare-fun sort (ty uni) Bool)

(declare-fun witness (ty) uni)

;; witness_sort
  (assert (forall ((a ty)) (sort a (witness a))))

(declare-fun int () ty)

(declare-fun real () ty)

(declare-fun bool () ty)

(declare-fun match_bool (ty Bool uni uni) uni)

;; match_bool_sort
  (assert
  (forall ((a ty))
  (forall ((x7 Bool) (x8 uni) (x9 uni)) (sort a (match_bool a x7 x8 x9)))))

;; match_bool_True
  (assert
  (forall ((a ty))
  (forall ((z uni) (z1 uni)) (=> (sort a z) (= (match_bool a true z z1) z)))))

;; match_bool_False
  (assert
  (forall ((a ty))
  (forall ((z uni) (z1 uni))
  (=> (sort a z1) (= (match_bool a false z z1) z1)))))

(declare-fun index_bool (Bool) Int)

;; index_bool_True
  (assert (= (index_bool true) 0))

;; index_bool_False
  (assert (= (index_bool false) 1))

;; bool_inversion
  (assert (forall ((u Bool)) (or (= u true) (= u false))))

(declare-sort tuple0 0)

(declare-fun tuple01 () ty)

(declare-fun Tuple0 () tuple0)

;; tuple0_inversion
  (assert (forall ((u tuple0)) (= u Tuple0)))

(declare-fun qtmark () ty)

(declare-fun usTO_BE_COMPLETED6 () Bool)

(declare-fun usVALUE_TO_BE_COMPLETED6 (ty) uni)

;; _VALUE_TO_BE_COMPLETED_sort
  (assert (forall ((a ty)) (sort a (usVALUE_TO_BE_COMPLETED6 a))))

(declare-fun usVARIANT_TO_BE_COMPLETED6 () Int)

;; CompatOrderMult
  (assert
  (forall ((x7 Int) (y7 Int) (z Int))
  (=> (<= x7 y7) (=> (<= 0 z) (<= (* x7 z) (* y7 z))))))

;; add_div
  (assert
  (forall ((x7 Real) (y7 Real) (z Real))
  (=> (not (= z 0.0)) (= (/ (+ x7 y7) z) (+ (/ x7 z) (/ y7 z))))))

;; sub_div
  (assert
  (forall ((x7 Real) (y7 Real) (z Real))
  (=> (not (= z 0.0)) (= (/ (- x7 y7) z) (- (/ x7 z) (/ y7 z))))))

;; neg_div
  (assert
  (forall ((x7 Real) (y7 Real))
  (=> (not (= y7 0.0)) (= (/ (- x7) y7) (- (/ x7 y7))))))

;; assoc_mul_div
  (assert
  (forall ((x7 Real) (y7 Real) (z Real))
  (=> (not (= z 0.0)) (= (/ (* x7 y7) z) (* x7 (/ y7 z))))))

;; assoc_div_mul
  (assert
  (forall ((x7 Real) (y7 Real) (z Real))
  (=> (and (not (= y7 0.0)) (not (= z 0.0)))
  (= (/ (/ x7 y7) z) (/ x7 (* y7 z))))))

;; assoc_div_div
  (assert
  (forall ((x7 Real) (y7 Real) (z Real))
  (=> (and (not (= y7 0.0)) (not (= z 0.0)))
  (= (/ x7 (/ y7 z)) (/ (* x7 z) y7)))))

;; CompatOrderMult
  (assert
  (forall ((x7 Real) (y7 Real) (z Real))
  (=> (<= x7 y7) (=> (<= 0.0 z) (<= (* x7 z) (* y7 z))))))

(declare-fun abs1 (Real) Real)

;; abs_def
  (assert
  (forall ((x7 Real))
  (ite (<= 0.0 x7) (= (abs1 x7) x7) (= (abs1 x7) (- x7)))))

;; Abs_le
  (assert
  (forall ((x7 Real) (y7 Real))
  (= (<= (abs1 x7) y7) (and (<= (- y7) x7) (<= x7 y7)))))

;; Abs_pos
  (assert (forall ((x7 Real)) (<= 0.0 (abs1 x7))))

;; Abs_sum
  (assert
  (forall ((x7 Real) (y7 Real))
  (<= (abs1 (+ x7 y7)) (+ (abs1 x7) (abs1 y7)))))

;; Abs_prod
  (assert
  (forall ((x7 Real) (y7 Real)) (= (abs1 (* x7 y7)) (* (abs1 x7) (abs1 y7)))))

;; triangular_inequality
  (assert
  (forall ((x7 Real) (y7 Real) (z Real))
  (<= (abs1 (- x7 z)) (+ (abs1 (- x7 y7)) (abs1 (- y7 z))))))

(declare-fun map1 (ty ty) ty)

(declare-sort point12 0)

(declare-fun point13 () ty)

(declare-fun get (ty ty uni uni) uni)

;; get_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x7 uni) (x8 uni)) (sort b (get b a x7 x8)))))

(declare-fun set (ty ty uni uni uni) uni)

;; set_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x7 uni) (x8 uni) (x9 uni)) (sort (map1 a b) (set b a x7 x8 x9)))))

;; Select_eq
  (assert
  (forall ((m (Array Int point12)))
  (forall ((a1 Int) (a2 Int))
  (forall ((b point12))
  (! (=> (= a1 a2) (= (select (store m a1 b) a2) b)) :pattern ((select (store m a1 b) a2)) )))))

;; Select_eq
  (assert
  (forall ((a ty) (b ty))
  (forall ((m uni))
  (forall ((a1 uni) (a2 uni))
  (forall ((b1 uni))
  (! (=> (sort b b1) (=> (= a1 a2) (= (get b a (set b a m a1 b1) a2) b1))) :pattern (
  (get b a (set b a m a1 b1) a2)) ))))))

;; Select_neq
  (assert
  (forall ((m (Array Int point12)))
  (forall ((a1 Int) (a2 Int))
  (forall ((b point12))
  (! (=> (not (= a1 a2)) (= (select (store m a1 b) a2) (select m a2))) :pattern ((select (store m a1 b) a2)) )))))

;; Select_neq
  (assert
  (forall ((a ty) (b ty))
  (forall ((m uni))
  (forall ((a1 uni) (a2 uni))
  (=> (sort a a1)
  (=> (sort a a2)
  (forall ((b1 uni))
  (! (=> (not (= a1 a2)) (= (get b a (set b a m a1 b1) a2) (get b a m a2))) :pattern (
  (get b a (set b a m a1 b1) a2)) ))))))))

(declare-fun const1 (ty ty uni) uni)

;; const_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x7 uni)) (sort (map1 a b) (const1 b a x7)))))

(declare-fun const8 (point12) (Array Int point12))

;; Const
  (assert (forall ((b point12) (a Int)) (= (select (const8 b) a) b)))

;; Const
  (assert
  (forall ((a ty) (b ty))
  (forall ((b1 uni) (a1 uni))
  (=> (sort b b1) (= (get b a (const1 b a b1) a1) b1)))))

(declare-sort array 1)

(declare-fun array1 (ty) ty)

(declare-fun mk_array (ty Int uni) uni)

;; mk array_sort
  (assert
  (forall ((a ty))
  (forall ((x7 Int) (x8 uni)) (sort (array1 a) (mk_array a x7 x8)))))

(declare-fun mk_array7 (Int (Array Int point12)) (array point12))

(declare-fun length (ty uni) Int)

(declare-fun t2tb19 ((array point12)) uni)

;; t2tb_sort
  (assert
  (forall ((x7 (array point12))) (sort (array1 point13) (t2tb19 x7))))

(declare-fun tb2t19 (uni) (array point12))

;; BridgeL
  (assert
  (forall ((i (array point12)))
  (! (= (tb2t19 (t2tb19 i)) i) :pattern ((t2tb19 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (= (t2tb19 (tb2t19 j)) j) :pattern ((t2tb19 (tb2t19 j))) )))

;; length_def
  (assert
  (forall ((u Int) (u1 (Array Int point12)))
  (= (length point13 (t2tb19 (mk_array7 u u1))) u)))

;; length_def
  (assert
  (forall ((a ty))
  (forall ((u Int) (u1 uni)) (= (length a (mk_array a u u1)) u))))

(declare-fun elts (ty uni) uni)

;; elts_sort
  (assert
  (forall ((a ty)) (forall ((x7 uni)) (sort (map1 int a) (elts a x7)))))

(declare-fun t2tb20 ((Array Int point12)) uni)

;; t2tb_sort
  (assert
  (forall ((x7 (Array Int point12))) (sort (map1 int point13) (t2tb20 x7))))

(declare-fun tb2t20 (uni) (Array Int point12))

;; BridgeL
  (assert
  (forall ((i (Array Int point12)))
  (! (= (tb2t20 (t2tb20 i)) i) :pattern ((t2tb20 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (= (t2tb20 (tb2t20 j)) j) :pattern ((t2tb20 (tb2t20 j))) )))

;; elts_def
  (assert
  (forall ((u Int) (u1 (Array Int point12)))
  (= (tb2t20 (elts point13 (t2tb19 (mk_array7 u u1)))) u1)))

;; elts_def
  (assert
  (forall ((a ty))
  (forall ((u Int) (u1 uni))
  (=> (sort (map1 int a) u1) (= (elts a (mk_array a u u1)) u1)))))

;; array_inversion
  (assert
  (forall ((u (array point12)))
  (= u (mk_array7 (length point13 (t2tb19 u))
       (tb2t20 (elts point13 (t2tb19 u)))))))

;; array_inversion
  (assert
  (forall ((a ty))
  (forall ((u uni)) (= u (mk_array a (length a u) (elts a u))))))

(declare-fun get1 (ty uni Int) uni)

;; get_sort
  (assert
  (forall ((a ty)) (forall ((x7 uni) (x8 Int)) (sort a (get1 a x7 x8)))))

(declare-fun t2tb21 (point12) uni)

;; t2tb_sort
  (assert (forall ((x7 point12)) (sort point13 (t2tb21 x7))))

(declare-fun tb2t21 (uni) point12)

;; BridgeL
  (assert
  (forall ((i point12)) (! (= (tb2t21 (t2tb21 i)) i) :pattern ((t2tb21 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (= (t2tb21 (tb2t21 j)) j) :pattern ((t2tb21 (tb2t21 j))) )))

;; get_def
  (assert
  (forall ((a (array point12)) (i Int))
  (= (tb2t21 (get1 point13 (t2tb19 a) i)) (select (tb2t20
                                                  (elts point13 (t2tb19 a))) i))))

(declare-fun t2tb3 (Int) uni)

;; t2tb_sort
  (assert (forall ((x7 Int)) (sort int (t2tb3 x7))))

(declare-fun tb2t3 (uni) Int)

;; BridgeL
  (assert
  (forall ((i Int)) (! (= (tb2t3 (t2tb3 i)) i) :pattern ((t2tb3 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (= (t2tb3 (tb2t3 j)) j) :pattern ((t2tb3 (tb2t3 j))) )))

;; get_def
  (assert
  (forall ((a ty))
  (forall ((a1 uni) (i Int))
  (= (get1 a a1 i) (get a int (elts a a1) (t2tb3 i))))))

(declare-fun set1 (ty uni Int uni) uni)

;; set_sort
  (assert
  (forall ((a ty))
  (forall ((x7 uni) (x8 Int) (x9 uni)) (sort (array1 a) (set1 a x7 x8 x9)))))

;; set_def
  (assert
  (forall ((a (array point12)) (i Int) (v point12))
  (= (tb2t19 (set1 point13 (t2tb19 a) i (t2tb21 v))) (mk_array7
                                                     (length point13
                                                     (t2tb19 a))
                                                     (store (tb2t20
                                                            (elts point13
                                                            (t2tb19 a))) i v)))))

;; set_def
  (assert
  (forall ((a ty))
  (forall ((a1 uni) (i Int) (v uni))
  (= (set1 a a1 i v) (mk_array a (length a a1)
                     (set a int (elts a a1) (t2tb3 i) v))))))

(declare-fun make (ty Int uni) uni)

;; make_sort
  (assert
  (forall ((a ty))
  (forall ((x7 Int) (x8 uni)) (sort (array1 a) (make a x7 x8)))))

;; make_def
  (assert
  (forall ((n Int) (v point12))
  (= (tb2t19 (make point13 n (t2tb21 v))) (mk_array7 n (const8 v)))))

;; make_def
  (assert
  (forall ((a ty))
  (forall ((n Int) (v uni)) (= (make a n v) (mk_array a n (const1 a int v))))))

(declare-fun ref (ty) ty)

(declare-fun mk_ref (ty uni) uni)

;; mk ref_sort
  (assert (forall ((a ty)) (forall ((x7 uni)) (sort (ref a) (mk_ref a x7)))))

(declare-fun contents (ty uni) uni)

;; contents_sort
  (assert (forall ((a ty)) (forall ((x7 uni)) (sort a (contents a x7)))))

;; contents_def
  (assert
  (forall ((a ty))
  (forall ((u uni)) (=> (sort a u) (= (contents a (mk_ref a u)) u)))))

;; ref_inversion
  (assert
  (forall ((a ty))
  (forall ((u uni)) (=> (sort (ref a) u) (= u (mk_ref a (contents a u)))))))

(declare-fun mk_point6 (Real Real) point12)

(declare-fun x6 (point12) Real)

;; x_def
  (assert (forall ((u Real) (u1 Real)) (= (x6 (mk_point6 u u1)) u)))

(declare-fun y6 (point12) Real)

;; y_def
  (assert (forall ((u Real) (u1 Real)) (= (y6 (mk_point6 u u1)) u1)))

;; point_inversion
  (assert (forall ((u point12)) (= u (mk_point6 (x6 u) (y6 u)))))

(declare-fun dist6 (point12 point12) Real)

;; dist_pos
  (assert (forall ((a point12) (b point12)) (<= 0.0 (dist6 a b))))

;; dist_sym
  (assert (forall ((a point12) (b point12)) (= (dist6 a b) (dist6 b a))))

(declare-sort closest_pair_result12 0)

(declare-fun closest_pair_result13 () ty)

(declare-fun mk_closest_pair_result6 (Real Int Int) closest_pair_result12)

(declare-fun delta6 (closest_pair_result12) Real)

;; delta_def
  (assert
  (forall ((u Real) (u1 Int) (u2 Int))
  (= (delta6 (mk_closest_pair_result6 u u1 u2)) u)))

(declare-fun first6 (closest_pair_result12) Int)

;; first_def
  (assert
  (forall ((u Real) (u1 Int) (u2 Int))
  (= (first6 (mk_closest_pair_result6 u u1 u2)) u1)))

(declare-fun second6 (closest_pair_result12) Int)

;; second_def
  (assert
  (forall ((u Real) (u1 Int) (u2 Int))
  (= (second6 (mk_closest_pair_result6 u u1 u2)) u2)))

;; closest_pair_result_inversion
  (assert
  (forall ((u closest_pair_result12))
  (= u (mk_closest_pair_result6 (delta6 u) (first6 u) (second6 u)))))

(declare-fun distinct_indices_in_range6 (Int Int Int Int) Bool)

;; distinct_indices_in_range_def
  (assert
  (forall ((i Int) (j Int) (low Int) (high Int))
  (= (distinct_indices_in_range6 i j low high)
  (and (<= low i)
  (and (<= low j) (and (< i high) (and (< j high) (not (= i j)))))))))

(declare-fun closest_pair_post_for6 ((array point12) Int Int
  closest_pair_result12) Bool)

;; closest_pair_post_for_def
  (assert
  (forall ((a (array point12)) (low Int) (high Int)
  (r closest_pair_result12))
  (= (closest_pair_post_for6 a low high r)
  (and (distinct_indices_in_range6 (first6 r) (second6 r) low high)
  (forall ((i Int) (j Int))
  (=> (distinct_indices_in_range6 i j low high)
  (<= (delta6 r) (dist6 (tb2t21 (get1 point13 (t2tb19 a) i))
                 (tb2t21 (get1 point13 (t2tb19 a) j))))))))))

(declare-fun closest_pair_post6 ((array point12) closest_pair_result12) Bool)

;; closest_pair_post_def
  (assert
  (forall ((a (array point12)) (r closest_pair_result12))
  (= (closest_pair_post6 a r) (closest_pair_post_for6 a 0
  (length point13 (t2tb19 a)) r))))

(assert
;; WP_parameter_brute_force_search_sub_array6
 ;; File "closest_pair/../closest_pair.mlw", line 71, characters 4-32
  (not
  (forall ((a Int) (a1 (Array Int point12)) (low Int) (high Int))
  (let ((a2 (mk_array7 a a1)))
  (=> (and (<= 0 a) (and (<= 0 low) (and (< low high) (<= high a))))
  (let ((o (+ low 1)))
  (and (and (<= 0 o) (< o a))
  (and (and (<= 0 low) (< low a))
  (let ((o1 (- high 2)))
  (and
  (=> (< o1 low) (closest_pair_post_for6 a2 low high
  (mk_closest_pair_result6 (dist6 (select a1 low) (select a1 o)) low
  (+ low 1))))
  (=> (<= low o1)
  (and
  (and
  (and (<= low (- high 2))
  (forall ((j Int))
  (=> (and (<= (+ low 1) j) (<= j (- high 1)))
  (<= (dist6 (select a1 low) (select a1 o)) (dist6 (select a1 low)
                                            (select a1 j))))))
  (= (dist6 (select a1 low) (select a1 (+ low 1))) (dist6 (select a1 low)
                                                   (select a1 o))))
  (forall ((min Real) (s Int) (f Int))
  (and
  (forall ((i Int))
  (=> (and (<= low i) (<= i o1))
  (=>
  (and
  (and (<= low (- high 2))
  (forall ((j Int))
  (=> (and (<= (+ i 1) j) (<= j (- high 1)))
  (<= min (dist6 (select a1 i) (select a1 j))))))
  (= (dist6 (select a1 f) (select a1 s)) min))
  (let ((o2 (- high 1)))
  (let ((o3 (+ i 1)))
  (and
  (=> (< o2 o3)
  (and
  (and (<= low (- high 2))
  (forall ((j Int))
  (=> (and (<= (+ (+ i 1) 1) j) (<= j (- high 1)))
  (<= min (dist6 (select a1 (+ i 1)) (select a1 j))))))
  (= (dist6 (select a1 f) (select a1 s)) min)))
  (=> (<= o3 o2)
  (and
  (and
  (and (<= (+ i 1) (- high 1)) (<= min (dist6 (select a1 i) (select a1 o3))))
  (distinct_indices_in_range6 i o3 low high))
  (forall ((min1 Real) (s1 Int) (f1 Int))
  (and
  (forall ((j Int))
  (=> (and (<= o3 j) (<= j o2))
  (=>
  (and
  (and (<= (+ i 1) (- high 1)) (<= min1 (dist6 (select a1 i) (select a1 j))))
  (distinct_indices_in_range6 i j low high))
  (and (and (<= 0 j) (< j a))
  (and (and (<= 0 i) (< i a))
  (let ((d (dist6 (select a1 i) (select a1 j))))
  (ite (< d min1)
  (forall ((f2 Int))
  (=> (= f2 i)
  (forall ((s2 Int))
  (=> (= s2 j)
  (forall ((min2 Real))
  (=> (= min2 d)
  (and
  (and (<= (+ i 1) (- high 1))
  (<= min2 (dist6 (select a1 i) (select a1 (+ j 1)))))
  (distinct_indices_in_range6 i (+ j 1) low high))))))))
  (and
  (and (<= (+ i 1) (- high 1))
  (<= min1 (dist6 (select a1 i) (select a1 (+ j 1)))))
  (distinct_indices_in_range6 i (+ j 1) low high)))))))))
  (=>
  (and
  (and (<= (+ i 1) (- high 1))
  (<= min1 (dist6 (select a1 i) (select a1 (+ o2 1)))))
  (distinct_indices_in_range6 i (+ o2 1) low high))
  (and
  (and (<= low (- high 2))
  (forall ((j Int))
  (=> (and (<= (+ (+ i 1) 1) j) (<= j (- high 1)))
  (<= min1 (dist6 (select a1 (+ i 1)) (select a1 j))))))
  (= (dist6 (select a1 f1) (select a1 s1)) min1)))))))))))))
  (=>
  (and
  (and (<= low (- high 2))
  (forall ((j Int))
  (=> (and (<= (+ (+ o1 1) 1) j) (<= j (- high 1)))
  (<= min (dist6 (select a1 (+ o1 1)) (select a1 j))))))
  (= (dist6 (select a1 f) (select a1 s)) min)) (closest_pair_post_for6 a2 low
  high (mk_closest_pair_result6 min f s)))))))))))))))))
(check-sat)
